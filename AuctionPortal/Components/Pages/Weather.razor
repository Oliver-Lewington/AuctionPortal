@page "/weather"
@using MudBlazor
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Weather Forecast</MudText>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => Snackbar.Add("Simple Snackbar"))">
    Open snackbar
</MudButton>

@if (forecasts == null)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else
{
    <MudTable Items="@forecasts" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Temp. (°C)</MudTh>
            <MudTh>Temp. (°F)</MudTh>
            <MudTh>Summary</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
            <MudTd DataLabel="Temp. (°C)">@context.TemperatureC</MudTd>
            <MudTd DataLabel="Temp. (°F)">@context.TemperatureF</MudTd>
            <MudTd DataLabel="Summary">@context.Summary</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate async load
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild",
            "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
